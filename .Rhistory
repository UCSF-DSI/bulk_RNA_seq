## if you ARE using an R notebook (if not the comment out this line):
knitr::opts_knit$set(root.dir = "~/Desktop/RNAseq/Data/")
## if you ARE NOT using an R notebook (un-comment this line):
#setwd("~/Desktop/RNAseq/Data/")
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("GEOquery", "edgeR")
## if you ARE using an R notebook (if not the comment out this line):
knitr::opts_knit$set(root.dir = "~/Desktop/RNAseq/Data/")
## if you ARE NOT using an R notebook (un-comment this line):
#setwd("~/Desktop/RNAseq/Data/")
?getGEOSuppFiles
gse <- getGEOSuppFiles("GSE63310")
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt", "GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt", "GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt", "GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt", "GSM1545545_JMS9-P8c.txt")
for(i in paste(files, ".gz", sep="")) {
gunzip(i, overwrite=TRUE)
}
untar("./GSE63310/GSE63310_RAW.tar")
files <- c("GSM1545535_10_6_5_11.txt", "GSM1545536_9_6_5_11.txt", "GSM1545538_purep53.txt", "GSM1545539_JMS8-2.txt", "GSM1545540_JMS8-3.txt", "GSM1545541_JMS8-4.txt", "GSM1545542_JMS8-5.txt", "GSM1545544_JMS9-P7c.txt", "GSM1545545_JMS9-P8c.txt")
for(i in paste(files, ".gz", sep="")) {
gunzip(i, overwrite=TRUE)
}
files[1]
f1 <- read.delim(files[1])
dim(f1)
head(f1)
?readDGE
dge <- readDGE(files, columns=c(1,3))
dge
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("edgeR","org.Mm.eg.db")
## if you ARE using an R notebook (if not the comment out this line):
knitr::opts_knit$set(root.dir = "~/Desktop/RNAseq/Data/")
## if you ARE NOT using an R notebook (un-comment this line):
#setwd("~/Desktop/RNAseq/Data/")
files
dge <- readDGE(files, columns=c(1,3))
dge
dge$samples$group <- as.factor(c("LP", "ML", "Basal", "Basal", "ML", "LP", "Basal", "ML", "LP"))
dge$samples
head(dge$counts)
dge_ids <- rownames(dge)
head(dge_ids)
gene_ids <- select(org.Mm.eg.db,
keys=dge_ids,
keytype="ENTREZID",
columns=c("SYMBOL"))
head(gene_ids)
names(dge)
dge$gene_ids <- gene_ids
names(dge)
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("edgeR")
## if you ARE using an R notebook (if not the comment out this line):
knitr::opts_knit$set(root.dir = "~/Desktop/RNAseq/Data/")
## if you ARE NOT using an R notebook (un-comment this line):
#setwd("~/Desktop/RNAseq/Data/")
f1 <- read.delim(files[1])
dim(f1)
head(f1)
?cpm
cpm <- cpm(dge)
log2_cpm <- cpm(dge, log=TRUE)
head(dge$counts)
head(cpm)
head(log2_cpm)
View(dge)
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("edgeR","RColorBrewer")
dge_sub <- dge[rowSums(cpm>1)>=3, ]
head(cpm)
head(rowSums(cpm>1))
head(rowSums(cpm>1)>=3)
dim(dge)
dim(dge_sub)
nrow(dge_sub) / nrow(dge)
?RColorBrewer
nsamples <- ncol(dge_sub)
col <- brewer.pal(nsamples, "Paired")
col
log2cpm_raw <- cpm(dge, log=TRUE)
log2cpm_sub <- cpm(dge_sub, log=TRUE)
density(log2cpm_raw[,1])
density(log2cpm_sub[,1])
par(mfrow=c(1,2))
plot(density(log2cpm_raw[,1]),
col=col[1],
lwd=2,
ylim=c(0,0.21),
las=2,
main="",
xlab="")
title(main="A. Raw data", xlab="Log2(CPM)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(log2cpm_raw[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
par(mfrow=c(1,2))
plot(density(log2cpm_raw[,1]),
col=col[1],
lwd=2,
ylim=c(0,0.21),
las=2,
main="",
xlab="")
title(main="A. Raw data", xlab="Log2(CPM)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(log2cpm_raw[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
plot(density(log2cpm_sub[,1]),
col=col[1],
lwd=2,
ylim=c(0,0.21),
las=2,
main="",
xlab="")
title(main="B. Filtered data", xlab="Log2(CPM)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(log2cpm_sub[,i])
lines(den$x, den$y, col=col[i], lwd=2)
}
?cpm
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("edgeR","RColorBrewer")
dge_sub$samples
?calcNormFactors
dge_sub_norm <- calcNormFactors(dge_sub, method = "TMM")
dge_sub_norm$samples
dge_sub$counts[,1] <- dge_sub$counts[,1]*0.05
dge_sub$counts[,2] <- dge_sub$counts[,2]*5
log2cpm_unorm <- cpm(dge_sub, log=TRUE)
log2cpm_norm <- cpm(dge_sub_norm, log=TRUE)
par(mfrow=c(1,2))
boxplot(log2cpm_unorm,
las=2,
col=col,
main="")
title(main="A. Unnormalized data",ylab="Log2(CPM)")
boxplot(log2cpm_norm,
las=2,
col=col,
main="")
title(main="B. Normalized data",ylab="Log2(CPM)")
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("limma","RColorBrewer")
## if you ARE using an R notebook (if not the comment out this line):
knitr::opts_knit$set(root.dir = "~/Desktop/RNAseq/Results/")
## if you ARE NOT using an R notebook (un-comment this line):
#setwd("~/Desktop/RNAseq/Results/")
grps <- dge_sub$samples$group
col.grp <- grps
levels(col.grp) <-  brewer.pal(nlevels(col.grp), "Set1")
col.grp <- as.character(col.grp)
col.grp
grps
?plotMDS
head(log2cpm_norm)
#png("MDSplot.png")
par(mfrow=c(1,1))
plotMDS(log2cpm_norm,
labels=grps,
col=col.grp,
xlab="Log2(Fold-Change)",
ylab="Log2(Fold-Change)")
title(main="Sample groups")
#dev.off()
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("limma","RColorBrewer")
## if you ARE using an R notebook (if not the comment out this line):
knitr::opts_knit$set(root.dir = "~/Desktop/RNAseq/Results/")
## if you ARE NOT using an R notebook (un-comment this line):
#setwd("~/Desktop/RNAseq/Results/")
?model.matrix
grps
design <- model.matrix(~0 + grps)
design
colnames(design) <- gsub("grps", "", colnames(design))
design
?makeContrasts
contrast <- makeContrasts(
BasalvsLP = Basal - LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
contrast
?voom
dge_voom <- voom(dge_sub_norm, design)
dge_voom
?lmFit
dge_fit <- lmFit(dge_voom, design)
?contrasts.fit
grp_fit <- contrasts.fit(dge_fit, contrasts=contrast)
head(dge_fit$coefficients)
head(grp_fit$coefficients)
?eBayes
efit <- eBayes(grp_fit)
efit
?plotSA
plotSA(efit, main="Meanâˆ’variance trend")
?decideTests
summary(decideTests(efit))
?topTable
## look at top 10 overall by F statistics/p-values
topTableF(efit, number=10)
names(efit)
efit$contrasts
## Basal vs. LP (coef=1)
topTable(efit, coef=1, number=10, sort.by="p")
## Basal vs. ML (coef=2)
topTable(efit, coef=2, number=10, sort.by="p")
## LP vs. ML (coef=3)
topTable(efit, coef=3, number=10, sort.by="p")
write.fit(efit, file="DEresults.txt", adjust="BH", method="separate")
## Defining install_load function - adapted from: https://gitlab.com/iembry/install.load
install_load <- function(package1, ...) {
# convert arguments to vector
packages <- c(package1, ...)
# start loop to determine if each package is installed
for(package in packages) {
# if package is installed, just load it
if(package %in% (BiocManager::available()))
do.call('library', list(package))
# if package is not installed locally, download, then load
else {
BiocManager::install(package)
do.call("library", list(package))
}
}
}
install_load("limma","gplots","RColorBrewer")
## if you ARE using an R notebook (if not the comment out this line):
knitr::opts_knit$set(root.dir = "~/Desktop/RNAseq/Results/")
## if you ARE NOT using an R notebook (un-comment this line):
#setwd("~/Desktop/RNAseq/Results/")
?apply
var_genes <- apply(log2cpm_norm, 1, var)
head(var_genes)
select_var <- names(sort(var_genes, decreasing=TRUE))[1:500]
head(select_var)
highly_variable_lcpm <- log2cpm_norm[select_var,]
dim(highly_variable_lcpm)
head(highly_variable_lcpm)
## Get some nicer colors
## to display brewer colors (use diverging colors in this instance): display.brewer.all()
mypalette <- brewer.pal(11,"RdBu")
morecols <- colorRampPalette(mypalette)
# Set up color vector for celltype variable
col.cell <- c("honeydew4", "lightblue3", "lightcyan2")[c(dge$samples$group)]
# Plot the heatmap
png(filename="heatmap.png")
heatmap <- heatmap.2(highly_variable_lcpm, col=rev(morecols(50)), trace="none",
main="Top 500 most variable genes - ML v. LP v. Basal",
ColSideColors=col.cell,scale="row",
srtCol = 25,
labRow = NA)
dev.off()
plot(heatmap$colDendrogram)
plot(heatmap$rowDendrogram)
top_500_clustered <- as.hclust(heatmap$rowDendrogram)
# define the clusters (essentially picking where to "cut"" the dendogram and select clusters)
# cutree() returns a vector of cluster membership in the order of the original data rows
mycl <- cutree(top_500_clustered, h=max(40))
# examine it
#mycl
# examine the head and tail of cluster membership by it's order in the heatmap
head(mycl[top_500_clustered$order], n=10)
tail(mycl[top_500_clustered$order], n=10)
# you could either grab a cluster
#cluster1 <- highly_variable_lcpm[mycl == 1,]
# or simply add the cluster ID to your data. This is what we'll do.
cldat <- cbind(highly_variable_lcpm, clusterID=mycl)
# examine the data with cluster ids attached, and ordered like the heat map
top_diff_genes <- as.data.frame(cldat[top_500_clustered$order,])
# check is gene IDs table is still in memory:
head(gene_ids)
#use gene IDs to rename genes in hr...
top_diff_genes <- tibble::rownames_to_column(top_diff_genes, "ENTREZID")
top_diff_genes <- merge(gene_ids, top_diff_genes, by="ENTREZID")
head(top_diff_genes, n=10)
mycl <- cutree(top_500_clustered, h=max(40))
head(mycl[top_500_clustered$order], n=10)
tail(mycl[top_500_clustered$order], n=10)
# Now we'll grab a cluster
cluster1 <- highly_variable_lcpm[mycl == 1,]
# as opposed to adding the cluster ID to the data, as we did previously.
#cldat <- cbind(highly_variable_lcpm, clusterID=mycl)
top_diff_genes <- as.data.frame(cluster1)
#use gene IDs to rename genes in hr...
top_diff_genes <- tibble::rownames_to_column(top_diff_genes, "ENTREZID")
top_diff_genes <- merge(gene_ids, top_diff_genes, by="ENTREZID")
head(top_diff_genes, n=10)
mycl <- cutree(top_500_clustered,
h=max(20) # here is the line to edit in this case - sets the height at which to "cut" the dendogram
)
head(mycl[top_500_clustered$order], n=10)
tail(mycl[top_500_clustered$order], n=10)
# This time we're adding the cluster assignment to the data to observe what this threshold adjustment actually accomplished
cldat <- cbind(highly_variable_lcpm, clusterID=mycl)
top_diff_genes <- as.data.frame(cldat[top_500_clustered$order,])
top_diff_genes <- tibble::rownames_to_column(top_diff_genes, "ENTREZID")
top_diff_genes <- merge(gene_ids, top_diff_genes, by="ENTREZID", sort = F)
head(top_diff_genes)
### Rehashing how to format data for volano plots (from notebooks 6, 7, 8)
# start with our groups
grps # this variable contains our groups of samples (ML, LP, Basal) - created in notebook #7 (unsupervised clustering)
# creating design matrix (dummy variable creation for each sample and the group it belongs to)
design <- model.matrix(~0 + grps)
# relabeling columns
colnames(design) <- gsub("grps", "", colnames(design))
#creating contrast matrix
contrast <- makeContrasts(
BasalvsLP = Basal - LP,
BasalvsML = Basal - ML,
LPvsML = LP - ML,
levels = colnames(design))
# Now we use `voom()` from `limma` to combine log2(CPM) values from the filtered, normalized data with the design matrix
dge_voom <- voom(dge_sub_norm, design)
# Using limma's lmfit() function - this is the linear model fit step
dge_fit <- lmFit(dge_voom, design)
# Using contrast matrix to compare the groups
grp_fit <- contrasts.fit(dge_fit, contrasts=contrast)
# Empirical Bayes method (limma) to use information across all genes - this should make the residual variances independent of the expression levels.
efit <- eBayes(grp_fit)
# convert gene IDs to Gene Symbols for easier interpretation
efit_genes <- names(efit$Amean)
efit_genes <- as.data.frame.AsIs(efit_genes)
colnames(efit_genes) <- "ENTREZID"
efit_genes <- merge(gene_ids, efit_genes, by="ENTREZID", sort = F)
names(efit$Amean) <- efit_genes$SYMBOL
?volcanoplot
# basal vs lp
volcanoplot(efit,
coef = 1,
style = "p-value",
highlight = 10,
names = names(efit$Amean),
hl.col="blue",
main = "Basal vs LP",
xlab = "Log2 Fold Change",
ylab = NULL,
pch=20,
cex=0.35)
# basal vs ml
volcanoplot(efit, coef = 2, style = "B-statistic", highlight = 10, names = names(efit$Amean),
hl.col="blue",
main = "Basal vs ML", xlab = "Log2 Fold Change", ylab = NULL, pch=20, cex=0.35)
# lp vs ml
volcanoplot(efit,coef = 3, style = "p-value", highlight = 10, names = names(efit$Amean),
hl.col="blue",
main = "LP vs ML", xlab = "Log2 Fold Change", ylab = NULL, pch=20, cex=0.35)
?topTable
# top hits:
BasalvLP_top <- topTable(efit, coef = 1, number = 10, sort.by = 'P')
BasalvLP_top
# top hits:
BasalvML_top <- topTable(efit, coef = 2, number = 10, sort.by = 'P')
BasalvML_top
# top hits:
ML_v_LP_top <- topTable(efit, coef = 3, number = 10, sort.by = 'P')
ML_v_LP_top
# convert gene IDs to Gene Symbols for easier interpretation
ML_v_LP_top <- tibble::rownames_to_column(ML_v_LP_top, "ENTREZID")
ML_v_LP_top <- merge(gene_ids, ML_v_LP_top, by="ENTREZID", sort = F)
ML_v_LP_top
R.version
